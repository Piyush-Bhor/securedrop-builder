#!/bin/bash
# Wrapper script to build Debian packages for the SecureDrop Workstation.
# Requires a source tarball to build the package, defined via `PKG_PATH`.
# The script will check for a suitable tarball on an adjacent directory.
# Explicit configuration is available via the following env vars:
#
#   * PKG_PATH
#   * PKG_VERSION
#   * PKG_NAME
#
set -e
set -u
set -o pipefail

# Store root of repo, since we'll change dirs several times.
CUR_DIR="$(git rev-parse --show-toplevel)"

# Verify sha256sums.txt in the git repo
"${CUR_DIR}/scripts/verify-sha256sum-signature"

# Disable use of pip cache during debhelper build actions.
export DH_PIP_EXTRA_ARGS="--no-cache-dir --require-hashes"

# Declare general packaging building workspace; subdirs will
# be created within, to build specific packages.
TOP_BUILDDIR="$HOME/debbuild/packaging"
mkdir -p "$TOP_BUILDDIR"
rm -rf "${TOP_BUILDDIR:?}/${PKG_NAME}"
mkdir -p "${TOP_BUILDDIR}/${PKG_NAME}"
# Move changelog into place (we have separate changelogs for each platform)
PLATFORM="$(lsb_release -sc)"

# Validate required args.
if [[ -z "${PKG_NAME:-}" ]]; then
    echo "Set PKG_NAME of the build";
    exit 1
fi


function find_latest_version() {
    repo_url="https://github.com/freedomofpress/${PKG_NAME}/releases"
    curl -s "$repo_url" \
        | perl -nE '$_ =~ m#/releases/tag/(v?[\d\.]+)\"# and say $1' \
        | head -n 1
}

if [[ -z "${PKG_VERSION:-}" ]]; then
    echo "PKG_VERSION not set, inferring from recent releases..."
    PKG_VERSION="$(find_latest_version)"
    if [[ -z "$PKG_VERSION" ]]; then
        echo "Failed to infer version"
        exit 1
    else
        echo "Using PKG_VERSION: $PKG_VERSION"
    fi
fi

# Copy over the debian directory (including new changelog) from repo
cp -r "$CUR_DIR/$PKG_NAME/" "$TOP_BUILDDIR/"

# If the package is contained in the list, it should be a python package. In
# that case, we should extract tarball, and validate wheel hashes.
if [[ "${PKG_NAME}" =~ ^(securedrop-client|securedrop-proxy|securedrop-export|securedrop-log)$ ]]; then
    echo "${PKG_NAME} is a Python package"

    if [[ -z "${PKG_PATH:-}" ]]; then
        # Try to find tarball in a reasonable location
        candidate_pkg_path="$(realpath "${CUR_DIR}/../${PKG_NAME}/dist/${PKG_NAME}-${PKG_VERSION}.tar.gz")"
        if [[ -f "$candidate_pkg_path" ]]; then
            PKG_PATH="$candidate_pkg_path"
            echo "Found tarball at $PKG_PATH, override with PKG_PATH..."
        else
            echo "Set PKG_PATH source tarball";
            exit 1
        fi
    fi

    # Copy the source tarball to the packaging workspace
    cp "$PKG_PATH" "$TOP_BUILDDIR/$PKG_NAME/"

    # Extract the source tarball in the packaging workspace
    tar --strip-components=1 -C "$TOP_BUILDDIR/$PKG_NAME" -xvf "$PKG_PATH"

    # Hop into the package build dir, to run dpkg-buildpackage
    cd "$TOP_BUILDDIR/$PKG_NAME/"

    # Verify all the hashes from the verified sha256sums.txt
    $CUR_DIR/scripts/verify-hashes $CUR_DIR/sha256sums.txt

    echo "All hashes verified."
else
    # Hop into the package build dir, to run dpkg-buildpackage
    cd "$TOP_BUILDDIR/$PKG_NAME/"
    echo "Package is a metapackage"
fi

printf "Building package '%s' from version '%s'...\\n" "$PKG_NAME" "$PKG_VERSION"

echo "$TOP_BUILDDIR/$PKG_NAME/"
mv "$TOP_BUILDDIR/$PKG_NAME/debian/changelog-$PLATFORM" "$TOP_BUILDDIR/$PKG_NAME/debian/changelog"

# Adds reproducibility step
export SOURCE_DATE_EPOCH=`dpkg-parsechangelog -STimestamp`

# Build the package
dpkg-buildpackage -us -uc

# Tell the user the path of the files buillt
pkg_path="$(find "$TOP_BUILDDIR" -type f -iname "${PKG_NAME}_${PKG_VERSION}*.deb" | head -n1)"
if [[ -f "$pkg_path" ]]; then
    echo "Package location: $pkg_path"
else
    echo "Could not find package, look in $TOP_BUILDDIR"
fi

#!/usr/bin/env python3

# To update the requirements files with sha256sums from our local PyPI.

import os
import sys
import glob
import hashlib
import subprocess
from pprint import pprint


def main():
    PKG_DIR = os.environ["PKG_DIR"]
    if not PKG_DIR:
        print("Set PKG_DIR of the project")
        sys.exit(1)

    input_requirements_path = os.path.join(
        PKG_DIR, "requirements.txt")

    output_requirements_path = os.path.join(
        PKG_DIR, "build-requirements.txt")

    if not os.path.exists(input_requirements_path):
        print("Missing {0}.".format(input_requirements_path))
        sys.exit(1)

    # First remove index line and any PyQt or sip dependency
    cleaned_lines = cleanup(input_requirements_path)

    verify_sha256sums_file()

    # Now let us update the files along with the sha256sums from localwheels
    add_sha256sums(output_requirements_path, cleaned_lines)

def verify_sha256sums_file():
    "Verifies the sha256sums.txt file with gpg signature"

    if not os.path.exists("sha256sums.txt"):
        print("Missing sha256sums.txt file.")
        sys.exit(1)

    if not os.path.exists("sha256sums.txt.asc"):
        print("Missing sha256sums.txt.asc file.")
        sys.exit(1)

    # Both file exists, we can now verify using gpg.
    # Using a wrapper script to ensure proper keyring.
    cmd = ["./scripts/verify-sha256sum-signature"]
    subprocess.check_call(cmd)

def add_sha256sums(path: str, requirements_lines: list, shasums_file: str ="sha256sums.txt") -> None:
    """Adds all the required sha256sums to the wheels

    :param path: path to the requirements file.
    :type path: str
    :param requirements_lines: cleaned lines from the requirements file.
    :type requirements_lines: list
    :return: None
    :rtype: None
    """
    files = []

    with open(shasums_file) as fobj:
        lines = fobj.readlines()

    for line in lines:
        line = line.strip()
        # Skip any sources
        if line.find(".whl") == -1:
            continue
        files.append(line.split())

    newlines = []
    missing_wheels = []

    if not isinstance(requirements_lines, list):
        raise ValueError("requirements_lines must be a list")

    # For each dependency in the requirements file
    for mainline in requirements_lines:
        package_name_and_version = mainline.strip().split()[0]
        package_name = package_name_and_version.split('==')[0]
        package_version = package_name_and_version.split('==')[1]

        wheel_name_prefix = '{}-{}'.format(package_name, package_version)
        package_othername = '{}-{}'.format(package_name.replace("-", "_"), package_version)

        line = ""
        for name in files:
            lowername = name[1].lower()
            digest = name[0]

            # Now check if a wheel is already available
            if lowername.startswith(wheel_name_prefix) or lowername.startswith(
                package_othername
            ):
                # Now add the hash to the line
                if line.find("--hash") == -1:
                    line = "{} --hash=sha256:{}".format(
                        package_name_and_version, digest)
                else:
                    # Means a second wheel hash
                    line += " --hash=sha256:{}".format(digest)

        line += "\n"
        newlines.append(line)
        if line.find("--hash") == -1:  # Missing wheel
            missing_wheels.append(package_name_and_version)

    # Do not update the file if missing wheels
    if missing_wheels:
        print("The following dependent wheel(s) are missing:")
        for missing_dep in missing_wheels:
            print("{}".format(missing_dep))

        print("\nPlease build the wheel by using the following command:\n")
        print("\tPKG_DIR={0} make build-wheels\n".format(os.environ["PKG_DIR"]))
        print("Then sync the newly built wheels and sources to the s3 bucket.")
        print("Also update the index HTML files accordingly and sync to s3.")
        print("After these steps, please rerun the command again.")

        sys.exit(1)

    # Now update the file
    with open(path, "w") as fobj:
        for line in newlines:
            fobj.write(line)


def cleanup(path: str) -> str:
    """Cleans up requirement files

    :param path: The file to cleanup
    :type path: str
    :return: None
    :rtype: None
    """

    with open(path) as fobj:
        lines = fobj.readlines()

    finallines = []

    for line in lines:
        # Skip the PyPI index line so that when we
        # install we use the FPF PyPI mirror.
        if line.startswith("-i https://pypi.org/simple"):
            continue
        # We don't want to install pyqt5 from wheels.
        # It will come as a debian package dependency.
        elif line.startswith("pyqt5"):
            continue
        # We don't want to install sip from wheels.
        # It will come as a debian package dependency.
        elif line.startswith("sip"):
            continue
        # We want to ignore lines that are comments.
        elif line.lstrip().startswith("#"):
            continue
        # We just want the package names, since we're
        # using the hashes of the wheels (and we verified
        # the integrity of those hashes by verifying the gpg
        # signature of a textfile containing the list of hashes).
        elif line.lstrip().startswith("--hash=sha256"):
            continue
        else:
            finallines.append(line)

    return finallines


if __name__ == "__main__":
    main()

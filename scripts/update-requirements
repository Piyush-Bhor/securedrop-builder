#!/usr/bin/env python3

# To update the requirements files with sha256sums from our local PyPI.

import argparse
import os
import sys
import subprocess
from pathlib import Path
from typing import List

import utils


def parse_args():
    # For backwards-compat
    if "PKG_DIR" in os.environ and \
            not any(arg.startswith("--pkg-dir") for arg in sys.argv):
        sys.argv.extend(["--pkg-dir", os.environ["PKG_DIR"]])
    parser = argparse.ArgumentParser(description="Update requirements files with sha256sums from our wheels")
    parser.add_argument("--pkg-dir", help="Package directory", required=True)
    parser.add_argument("--project", help="Project to update")
    parser.add_argument("--requirements", help="Directory that contains requirements.txt inside the package directory",
                        default="requirements")
    return parser.parse_args()


def main():
    args = parse_args()
    pkg_dir = Path(args.pkg_dir).expanduser()
    if args.project is not None:
        project_name = args.project
    else:
        project_name = utils.project_name(pkg_dir)
    requirements_file = pkg_dir / args.requirements / "requirements.txt"
    project = Path(__file__).parent.parent / project_name

    # First remove index line and any PyQt or sip dependency
    cleaned_lines = cleanup(requirements_file)

    verify_sha256sums_file(project)

    build_requirements_file = pkg_dir / args.requirements / "build-requirements.txt"

    shasums_file = project / "sha256sums.txt"
    # Now let us update the files along with the sha256sums from localwheels
    add_sha256sums(build_requirements_file, cleaned_lines, shasums_file, pkg_dir)


def verify_sha256sums_file(project: Path):
    """Verifies the sha256sums.txt file with gpg signature"""

    filename = project / "sha256sums.txt"
    signature_filename = project / "sha256sums.txt.asc"
    if not filename.exists():
        print(f"Missing {filename} file.")
        sys.exit(1)

    if not signature_filename.exists():
        print(f"Missing {signature_filename} file.")
        sys.exit(1)

    # Both file exists, we can now verify using gpg.
    # Using a wrapper script to ensure proper keyring.
    subprocess.check_call(["./scripts/verify-sha256sum-signature", project.name])


def add_sha256sums(path: Path, requirements_lines: List[str],
                   shasums_file: Path, pkg_dir: Path) -> None:
    """Adds all the required sha256sums to the wheels"""
    files = []

    lines = shasums_file.read_text().splitlines()

    for line in lines:
        line = line.strip()
        # Skip any sources
        if line.find(".whl") == -1:
            continue
        files.append(line.split())

    newlines = []
    missing_wheels = []

    # For each dependency in the requirements file
    for mainline in requirements_lines:
        package_name_and_version = mainline.strip().split()[0]
        package_name = package_name_and_version.split('==')[0]
        package_version = package_name_and_version.split('==')[1]

        wheel_name_prefix = '{}-{}'.format(package_name, package_version)
        package_othername = '{}-{}'.format(package_name.replace("-", "_"), package_version)

        line = ""
        for name in files:
            lowername = name[1].lower()
            digest = name[0]

            # Now check if a wheel is already available
            if lowername.startswith(wheel_name_prefix) or lowername.startswith(
                package_othername
            ):
                # Now add the hash to the line
                if line.find("--hash") == -1:
                    line = "{} --hash=sha256:{}".format(
                        package_name_and_version, digest)
                else:
                    # Means a second wheel hash
                    line += " --hash=sha256:{}".format(digest)

        line += "\n"
        newlines.append(line)
        if line.find("--hash") == -1:  # Missing wheel
            missing_wheels.append(package_name_and_version)

    # Do not update the file if missing wheels
    if missing_wheels:
        print("The following dependent wheel(s) are missing:")
        for missing_dep in missing_wheels:
            print("{}".format(missing_dep))

        print("\nPlease build the wheel by using the following command:\n")
        print(f"\tPKG_DIR={pkg_dir} make build-wheels\n")
        print("Then add the newly built wheels and sources to ./localwheels/.")
        print("Also update the index HTML files accordingly commit your changes.")
        print("After these steps, please rerun the command again.")

        sys.exit(1)

    # Now update the file
    path.write_text("".join(newlines))
    print(f"Updated {path}")


def cleanup(path: Path) -> List[str]:
    """Cleans up requirement files

    :param path: The file to cleanup
    :type path: str
    :return: None
    :rtype: None
    """

    lines = path.read_text().splitlines()

    finallines = []

    for line in lines:
        # Skip the PyPI index line so that when we
        # install we use the FPF PyPI mirror.
        if line.startswith("-i https://pypi.org/simple"):
            continue
        # We don't want to install pyqt5 from wheels.
        # It will come as a debian package dependency.
        elif line.startswith("pyqt5"):
            continue
        # We don't want to install sip from wheels.
        # It will come as a debian package dependency.
        elif line.startswith("sip"):
            continue
        # We want to ignore lines that are comments.
        elif line.lstrip().startswith("#"):
            continue
        # We just want the package names, since we're
        # using the hashes of the wheels (and we verified
        # the integrity of those hashes by verifying the gpg
        # signature of a textfile containing the list of hashes).
        elif line.lstrip().startswith("--hash=sha256"):
            continue
        else:
            # To strip any extra new line characters
            line = line.strip("\ \n")
            if line:
                finallines.append(line)

    return finallines


if __name__ == "__main__":
    main()
